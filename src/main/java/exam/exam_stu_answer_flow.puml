@startuml
'https://plantuml.com/sequence-diagram

autonumber
participant web as A
participant 考试系统 as B
participant "Redis(缓存数据库)" as C
participant "MQ(消息队列)" as D

group 考试核心流程
A -> B: 设置考试试卷
B -> D: 将设置的考试试卷信息{考试ID，延时时间}放入延时消息队列
B -> C: 消费者消费延时队列中的消息，将考试的试卷信息放入到缓存数据库中
A -> B: 考生点击开始考试
B -> D: 将当前考生信息（{考试ID,考生ID，考试场次结束时间}）放入延时消息队列，\n用于在考试时间结束，系统自动提交试卷
B <-- C: 从缓存数据库中取出当前考试场次的试卷信息
A <-- B: 返回考生当前考试场次试卷信息缓存到本地浏览器localStorage中
A -> A: 考生开始答题，将考试答案和答题进度保存在本地localStorage
alt 考试流程方案
else 方案一
A -> C: 将保存的考试答案存入到redis（每做一题保存一题答案）
A <-- C: 保存考试答案成功，继续下一题答题
A -> C: 考生刷新页面，从本地localStorage中获取当前考生答题记录和答题进度
A <-- C: 返回考生当前答题记录
A -> B: 考生手动提交试卷将手动提交试卷的考生答题数据从redis同步到考试系统mysql中
B <- D: 考试时间到,消费延时队列中考生信息，如果当前考生未提交试卷，系统自动提交当前考生试卷
B <-- C: 异步同步系统自动提交试卷的考生redis中的答案到考生系统mysql中
else 方案二
A -> D: 并将考试答案放入到消息队列中（每做一题保存一题答案）
A <-- D: 考生答案成功放入消息队列，继续下一题答题
A -> C: 考生刷新页面，从本地localStorage中获取当前考生答题记录和答题进度
A <-- C: 返回考生当前答题记录
B <- D: 消费消息队列，将考生答案存入到数据库（mysql）
A -> B: 考生手动提交试卷或者考试时间到系统自动提交试卷，\n判断考生答题消息队列是否消费完成,未消费完成继续消费
end
A <-- B: 返回考试已经结束
end
@enduml
